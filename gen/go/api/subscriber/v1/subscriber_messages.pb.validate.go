// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/subscriber/v1/subscriber_messages.proto

package subscriber

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on SendFriendInviteRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SendFriendInviteRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendFriendInviteRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SendFriendInviteRequestMultiError, or nil if none found.
func (m *SendFriendInviteRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SendFriendInviteRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetFromUserId()) < 1 {
		err := SendFriendInviteRequestValidationError{
			field:  "FromUserId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_SendFriendInviteRequest_FromUserId_Pattern.MatchString(m.GetFromUserId()) {
		err := SendFriendInviteRequestValidationError{
			field:  "FromUserId",
			reason: "value does not match regex pattern \"^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetToUserId()) < 1 {
		err := SendFriendInviteRequestValidationError{
			field:  "ToUserId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_SendFriendInviteRequest_ToUserId_Pattern.MatchString(m.GetToUserId()) {
		err := SendFriendInviteRequestValidationError{
			field:  "ToUserId",
			reason: "value does not match regex pattern \"^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.Message != nil {

		if l := utf8.RuneCountInString(m.GetMessage()); l < 1 || l > 300 {
			err := SendFriendInviteRequestValidationError{
				field:  "Message",
				reason: "value length must be between 1 and 300 runes, inclusive",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return SendFriendInviteRequestMultiError(errors)
	}

	return nil
}

// SendFriendInviteRequestMultiError is an error wrapping multiple validation
// errors returned by SendFriendInviteRequest.ValidateAll() if the designated
// constraints aren't met.
type SendFriendInviteRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendFriendInviteRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendFriendInviteRequestMultiError) AllErrors() []error { return m }

// SendFriendInviteRequestValidationError is the validation error returned by
// SendFriendInviteRequest.Validate if the designated constraints aren't met.
type SendFriendInviteRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendFriendInviteRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendFriendInviteRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendFriendInviteRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendFriendInviteRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendFriendInviteRequestValidationError) ErrorName() string {
	return "SendFriendInviteRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SendFriendInviteRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendFriendInviteRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendFriendInviteRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendFriendInviteRequestValidationError{}

var _SendFriendInviteRequest_FromUserId_Pattern = regexp.MustCompile("^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$")

var _SendFriendInviteRequest_ToUserId_Pattern = regexp.MustCompile("^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$")

// Validate checks the field values on SendFriendInviteResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SendFriendInviteResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendFriendInviteResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SendFriendInviteResponseMultiError, or nil if none found.
func (m *SendFriendInviteResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SendFriendInviteResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for InviteId

	if len(errors) > 0 {
		return SendFriendInviteResponseMultiError(errors)
	}

	return nil
}

// SendFriendInviteResponseMultiError is an error wrapping multiple validation
// errors returned by SendFriendInviteResponse.ValidateAll() if the designated
// constraints aren't met.
type SendFriendInviteResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendFriendInviteResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendFriendInviteResponseMultiError) AllErrors() []error { return m }

// SendFriendInviteResponseValidationError is the validation error returned by
// SendFriendInviteResponse.Validate if the designated constraints aren't met.
type SendFriendInviteResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendFriendInviteResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendFriendInviteResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendFriendInviteResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendFriendInviteResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendFriendInviteResponseValidationError) ErrorName() string {
	return "SendFriendInviteResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SendFriendInviteResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendFriendInviteResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendFriendInviteResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendFriendInviteResponseValidationError{}

// Validate checks the field values on AcceptFriendInviteRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AcceptFriendInviteRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AcceptFriendInviteRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AcceptFriendInviteRequestMultiError, or nil if none found.
func (m *AcceptFriendInviteRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AcceptFriendInviteRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetInviteId()) < 1 {
		err := AcceptFriendInviteRequestValidationError{
			field:  "InviteId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_AcceptFriendInviteRequest_InviteId_Pattern.MatchString(m.GetInviteId()) {
		err := AcceptFriendInviteRequestValidationError{
			field:  "InviteId",
			reason: "value does not match regex pattern \"^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetUserId()) < 1 {
		err := AcceptFriendInviteRequestValidationError{
			field:  "UserId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_AcceptFriendInviteRequest_UserId_Pattern.MatchString(m.GetUserId()) {
		err := AcceptFriendInviteRequestValidationError{
			field:  "UserId",
			reason: "value does not match regex pattern \"^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return AcceptFriendInviteRequestMultiError(errors)
	}

	return nil
}

// AcceptFriendInviteRequestMultiError is an error wrapping multiple validation
// errors returned by AcceptFriendInviteRequest.ValidateAll() if the
// designated constraints aren't met.
type AcceptFriendInviteRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AcceptFriendInviteRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AcceptFriendInviteRequestMultiError) AllErrors() []error { return m }

// AcceptFriendInviteRequestValidationError is the validation error returned by
// AcceptFriendInviteRequest.Validate if the designated constraints aren't met.
type AcceptFriendInviteRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AcceptFriendInviteRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AcceptFriendInviteRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AcceptFriendInviteRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AcceptFriendInviteRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AcceptFriendInviteRequestValidationError) ErrorName() string {
	return "AcceptFriendInviteRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AcceptFriendInviteRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAcceptFriendInviteRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AcceptFriendInviteRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AcceptFriendInviteRequestValidationError{}

var _AcceptFriendInviteRequest_InviteId_Pattern = regexp.MustCompile("^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$")

var _AcceptFriendInviteRequest_UserId_Pattern = regexp.MustCompile("^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$")

// Validate checks the field values on AcceptFriendInviteResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AcceptFriendInviteResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AcceptFriendInviteResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AcceptFriendInviteResponseMultiError, or nil if none found.
func (m *AcceptFriendInviteResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AcceptFriendInviteResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if len(errors) > 0 {
		return AcceptFriendInviteResponseMultiError(errors)
	}

	return nil
}

// AcceptFriendInviteResponseMultiError is an error wrapping multiple
// validation errors returned by AcceptFriendInviteResponse.ValidateAll() if
// the designated constraints aren't met.
type AcceptFriendInviteResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AcceptFriendInviteResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AcceptFriendInviteResponseMultiError) AllErrors() []error { return m }

// AcceptFriendInviteResponseValidationError is the validation error returned
// by AcceptFriendInviteResponse.Validate if the designated constraints aren't met.
type AcceptFriendInviteResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AcceptFriendInviteResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AcceptFriendInviteResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AcceptFriendInviteResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AcceptFriendInviteResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AcceptFriendInviteResponseValidationError) ErrorName() string {
	return "AcceptFriendInviteResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AcceptFriendInviteResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAcceptFriendInviteResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AcceptFriendInviteResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AcceptFriendInviteResponseValidationError{}

// Validate checks the field values on DeclineFriendInviteRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeclineFriendInviteRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeclineFriendInviteRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeclineFriendInviteRequestMultiError, or nil if none found.
func (m *DeclineFriendInviteRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeclineFriendInviteRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetInviteId()) < 1 {
		err := DeclineFriendInviteRequestValidationError{
			field:  "InviteId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_DeclineFriendInviteRequest_InviteId_Pattern.MatchString(m.GetInviteId()) {
		err := DeclineFriendInviteRequestValidationError{
			field:  "InviteId",
			reason: "value does not match regex pattern \"^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetUserId()) < 1 {
		err := DeclineFriendInviteRequestValidationError{
			field:  "UserId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_DeclineFriendInviteRequest_UserId_Pattern.MatchString(m.GetUserId()) {
		err := DeclineFriendInviteRequestValidationError{
			field:  "UserId",
			reason: "value does not match regex pattern \"^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.Message != nil {

		if l := utf8.RuneCountInString(m.GetMessage()); l < 1 || l > 300 {
			err := DeclineFriendInviteRequestValidationError{
				field:  "Message",
				reason: "value length must be between 1 and 300 runes, inclusive",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return DeclineFriendInviteRequestMultiError(errors)
	}

	return nil
}

// DeclineFriendInviteRequestMultiError is an error wrapping multiple
// validation errors returned by DeclineFriendInviteRequest.ValidateAll() if
// the designated constraints aren't met.
type DeclineFriendInviteRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeclineFriendInviteRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeclineFriendInviteRequestMultiError) AllErrors() []error { return m }

// DeclineFriendInviteRequestValidationError is the validation error returned
// by DeclineFriendInviteRequest.Validate if the designated constraints aren't met.
type DeclineFriendInviteRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeclineFriendInviteRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeclineFriendInviteRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeclineFriendInviteRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeclineFriendInviteRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeclineFriendInviteRequestValidationError) ErrorName() string {
	return "DeclineFriendInviteRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeclineFriendInviteRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeclineFriendInviteRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeclineFriendInviteRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeclineFriendInviteRequestValidationError{}

var _DeclineFriendInviteRequest_InviteId_Pattern = regexp.MustCompile("^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$")

var _DeclineFriendInviteRequest_UserId_Pattern = regexp.MustCompile("^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$")

// Validate checks the field values on DeclineFriendInviteResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeclineFriendInviteResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeclineFriendInviteResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeclineFriendInviteResponseMultiError, or nil if none found.
func (m *DeclineFriendInviteResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeclineFriendInviteResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if len(errors) > 0 {
		return DeclineFriendInviteResponseMultiError(errors)
	}

	return nil
}

// DeclineFriendInviteResponseMultiError is an error wrapping multiple
// validation errors returned by DeclineFriendInviteResponse.ValidateAll() if
// the designated constraints aren't met.
type DeclineFriendInviteResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeclineFriendInviteResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeclineFriendInviteResponseMultiError) AllErrors() []error { return m }

// DeclineFriendInviteResponseValidationError is the validation error returned
// by DeclineFriendInviteResponse.Validate if the designated constraints
// aren't met.
type DeclineFriendInviteResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeclineFriendInviteResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeclineFriendInviteResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeclineFriendInviteResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeclineFriendInviteResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeclineFriendInviteResponseValidationError) ErrorName() string {
	return "DeclineFriendInviteResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeclineFriendInviteResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeclineFriendInviteResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeclineFriendInviteResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeclineFriendInviteResponseValidationError{}

// Validate checks the field values on GetFriendInviteRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetFriendInviteRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetFriendInviteRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetFriendInviteRequestMultiError, or nil if none found.
func (m *GetFriendInviteRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetFriendInviteRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetInviteId()) < 1 {
		err := GetFriendInviteRequestValidationError{
			field:  "InviteId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_GetFriendInviteRequest_InviteId_Pattern.MatchString(m.GetInviteId()) {
		err := GetFriendInviteRequestValidationError{
			field:  "InviteId",
			reason: "value does not match regex pattern \"^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetUserId()) < 1 {
		err := GetFriendInviteRequestValidationError{
			field:  "UserId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_GetFriendInviteRequest_UserId_Pattern.MatchString(m.GetUserId()) {
		err := GetFriendInviteRequestValidationError{
			field:  "UserId",
			reason: "value does not match regex pattern \"^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetFriendInviteRequestMultiError(errors)
	}

	return nil
}

// GetFriendInviteRequestMultiError is an error wrapping multiple validation
// errors returned by GetFriendInviteRequest.ValidateAll() if the designated
// constraints aren't met.
type GetFriendInviteRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetFriendInviteRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetFriendInviteRequestMultiError) AllErrors() []error { return m }

// GetFriendInviteRequestValidationError is the validation error returned by
// GetFriendInviteRequest.Validate if the designated constraints aren't met.
type GetFriendInviteRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetFriendInviteRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetFriendInviteRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetFriendInviteRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetFriendInviteRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetFriendInviteRequestValidationError) ErrorName() string {
	return "GetFriendInviteRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetFriendInviteRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetFriendInviteRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetFriendInviteRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetFriendInviteRequestValidationError{}

var _GetFriendInviteRequest_InviteId_Pattern = regexp.MustCompile("^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$")

var _GetFriendInviteRequest_UserId_Pattern = regexp.MustCompile("^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$")

// Validate checks the field values on GetFriendInviteResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetFriendInviteResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetFriendInviteResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetFriendInviteResponseMultiError, or nil if none found.
func (m *GetFriendInviteResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetFriendInviteResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetInvite()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetFriendInviteResponseValidationError{
					field:  "Invite",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetFriendInviteResponseValidationError{
					field:  "Invite",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetInvite()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetFriendInviteResponseValidationError{
				field:  "Invite",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetFriendInviteResponseMultiError(errors)
	}

	return nil
}

// GetFriendInviteResponseMultiError is an error wrapping multiple validation
// errors returned by GetFriendInviteResponse.ValidateAll() if the designated
// constraints aren't met.
type GetFriendInviteResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetFriendInviteResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetFriendInviteResponseMultiError) AllErrors() []error { return m }

// GetFriendInviteResponseValidationError is the validation error returned by
// GetFriendInviteResponse.Validate if the designated constraints aren't met.
type GetFriendInviteResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetFriendInviteResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetFriendInviteResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetFriendInviteResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetFriendInviteResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetFriendInviteResponseValidationError) ErrorName() string {
	return "GetFriendInviteResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetFriendInviteResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetFriendInviteResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetFriendInviteResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetFriendInviteResponseValidationError{}

// Validate checks the field values on GetAllFriendInvitesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAllFriendInvitesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAllFriendInvitesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAllFriendInvitesRequestMultiError, or nil if none found.
func (m *GetAllFriendInvitesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAllFriendInvitesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserId()) < 1 {
		err := GetAllFriendInvitesRequestValidationError{
			field:  "UserId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_GetAllFriendInvitesRequest_UserId_Pattern.MatchString(m.GetUserId()) {
		err := GetAllFriendInvitesRequestValidationError{
			field:  "UserId",
			reason: "value does not match regex pattern \"^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for PageToken

	if m.Direction != nil {

		if _, ok := RequestDirection_name[int32(m.GetDirection())]; !ok {
			err := GetAllFriendInvitesRequestValidationError{
				field:  "Direction",
				reason: "value must be one of the defined enum values",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.Status != nil {

		if _, ok := RequestStatus_name[int32(m.GetStatus())]; !ok {
			err := GetAllFriendInvitesRequestValidationError{
				field:  "Status",
				reason: "value must be one of the defined enum values",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return GetAllFriendInvitesRequestMultiError(errors)
	}

	return nil
}

// GetAllFriendInvitesRequestMultiError is an error wrapping multiple
// validation errors returned by GetAllFriendInvitesRequest.ValidateAll() if
// the designated constraints aren't met.
type GetAllFriendInvitesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAllFriendInvitesRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAllFriendInvitesRequestMultiError) AllErrors() []error { return m }

// GetAllFriendInvitesRequestValidationError is the validation error returned
// by GetAllFriendInvitesRequest.Validate if the designated constraints aren't met.
type GetAllFriendInvitesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAllFriendInvitesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAllFriendInvitesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAllFriendInvitesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAllFriendInvitesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAllFriendInvitesRequestValidationError) ErrorName() string {
	return "GetAllFriendInvitesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetAllFriendInvitesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAllFriendInvitesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAllFriendInvitesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAllFriendInvitesRequestValidationError{}

var _GetAllFriendInvitesRequest_UserId_Pattern = regexp.MustCompile("^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$")

// Validate checks the field values on GetAllFriendInvitesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAllFriendInvitesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAllFriendInvitesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAllFriendInvitesResponseMultiError, or nil if none found.
func (m *GetAllFriendInvitesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAllFriendInvitesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetInvites() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetAllFriendInvitesResponseValidationError{
						field:  fmt.Sprintf("Invites[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetAllFriendInvitesResponseValidationError{
						field:  fmt.Sprintf("Invites[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetAllFriendInvitesResponseValidationError{
					field:  fmt.Sprintf("Invites[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextPageToken

	if len(errors) > 0 {
		return GetAllFriendInvitesResponseMultiError(errors)
	}

	return nil
}

// GetAllFriendInvitesResponseMultiError is an error wrapping multiple
// validation errors returned by GetAllFriendInvitesResponse.ValidateAll() if
// the designated constraints aren't met.
type GetAllFriendInvitesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAllFriendInvitesResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAllFriendInvitesResponseMultiError) AllErrors() []error { return m }

// GetAllFriendInvitesResponseValidationError is the validation error returned
// by GetAllFriendInvitesResponse.Validate if the designated constraints
// aren't met.
type GetAllFriendInvitesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAllFriendInvitesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAllFriendInvitesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAllFriendInvitesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAllFriendInvitesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAllFriendInvitesResponseValidationError) ErrorName() string {
	return "GetAllFriendInvitesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetAllFriendInvitesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAllFriendInvitesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAllFriendInvitesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAllFriendInvitesResponseValidationError{}

// Validate checks the field values on GetFriendProfileRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetFriendProfileRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetFriendProfileRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetFriendProfileRequestMultiError, or nil if none found.
func (m *GetFriendProfileRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetFriendProfileRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserId()) < 1 {
		err := GetFriendProfileRequestValidationError{
			field:  "UserId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_GetFriendProfileRequest_UserId_Pattern.MatchString(m.GetUserId()) {
		err := GetFriendProfileRequestValidationError{
			field:  "UserId",
			reason: "value does not match regex pattern \"^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetFriendId()) < 1 {
		err := GetFriendProfileRequestValidationError{
			field:  "FriendId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_GetFriendProfileRequest_FriendId_Pattern.MatchString(m.GetFriendId()) {
		err := GetFriendProfileRequestValidationError{
			field:  "FriendId",
			reason: "value does not match regex pattern \"^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetFriendProfileRequestMultiError(errors)
	}

	return nil
}

// GetFriendProfileRequestMultiError is an error wrapping multiple validation
// errors returned by GetFriendProfileRequest.ValidateAll() if the designated
// constraints aren't met.
type GetFriendProfileRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetFriendProfileRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetFriendProfileRequestMultiError) AllErrors() []error { return m }

// GetFriendProfileRequestValidationError is the validation error returned by
// GetFriendProfileRequest.Validate if the designated constraints aren't met.
type GetFriendProfileRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetFriendProfileRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetFriendProfileRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetFriendProfileRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetFriendProfileRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetFriendProfileRequestValidationError) ErrorName() string {
	return "GetFriendProfileRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetFriendProfileRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetFriendProfileRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetFriendProfileRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetFriendProfileRequestValidationError{}

var _GetFriendProfileRequest_UserId_Pattern = regexp.MustCompile("^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$")

var _GetFriendProfileRequest_FriendId_Pattern = regexp.MustCompile("^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$")

// Validate checks the field values on GetFriendProfileResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetFriendProfileResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetFriendProfileResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetFriendProfileResponseMultiError, or nil if none found.
func (m *GetFriendProfileResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetFriendProfileResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetFriend()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetFriendProfileResponseValidationError{
					field:  "Friend",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetFriendProfileResponseValidationError{
					field:  "Friend",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFriend()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetFriendProfileResponseValidationError{
				field:  "Friend",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetFriendProfileResponseMultiError(errors)
	}

	return nil
}

// GetFriendProfileResponseMultiError is an error wrapping multiple validation
// errors returned by GetFriendProfileResponse.ValidateAll() if the designated
// constraints aren't met.
type GetFriendProfileResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetFriendProfileResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetFriendProfileResponseMultiError) AllErrors() []error { return m }

// GetFriendProfileResponseValidationError is the validation error returned by
// GetFriendProfileResponse.Validate if the designated constraints aren't met.
type GetFriendProfileResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetFriendProfileResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetFriendProfileResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetFriendProfileResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetFriendProfileResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetFriendProfileResponseValidationError) ErrorName() string {
	return "GetFriendProfileResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetFriendProfileResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetFriendProfileResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetFriendProfileResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetFriendProfileResponseValidationError{}

// Validate checks the field values on GetFriendsRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetFriendsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetFriendsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetFriendsRequestMultiError, or nil if none found.
func (m *GetFriendsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetFriendsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserId()) < 1 {
		err := GetFriendsRequestValidationError{
			field:  "UserId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_GetFriendsRequest_UserId_Pattern.MatchString(m.GetUserId()) {
		err := GetFriendsRequestValidationError{
			field:  "UserId",
			reason: "value does not match regex pattern \"^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for PageToken

	if len(errors) > 0 {
		return GetFriendsRequestMultiError(errors)
	}

	return nil
}

// GetFriendsRequestMultiError is an error wrapping multiple validation errors
// returned by GetFriendsRequest.ValidateAll() if the designated constraints
// aren't met.
type GetFriendsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetFriendsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetFriendsRequestMultiError) AllErrors() []error { return m }

// GetFriendsRequestValidationError is the validation error returned by
// GetFriendsRequest.Validate if the designated constraints aren't met.
type GetFriendsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetFriendsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetFriendsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetFriendsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetFriendsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetFriendsRequestValidationError) ErrorName() string {
	return "GetFriendsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetFriendsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetFriendsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetFriendsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetFriendsRequestValidationError{}

var _GetFriendsRequest_UserId_Pattern = regexp.MustCompile("^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$")

// Validate checks the field values on GetFriendsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetFriendsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetFriendsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetFriendsResponseMultiError, or nil if none found.
func (m *GetFriendsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetFriendsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetFriends() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetFriendsResponseValidationError{
						field:  fmt.Sprintf("Friends[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetFriendsResponseValidationError{
						field:  fmt.Sprintf("Friends[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetFriendsResponseValidationError{
					field:  fmt.Sprintf("Friends[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextPageToken

	if len(errors) > 0 {
		return GetFriendsResponseMultiError(errors)
	}

	return nil
}

// GetFriendsResponseMultiError is an error wrapping multiple validation errors
// returned by GetFriendsResponse.ValidateAll() if the designated constraints
// aren't met.
type GetFriendsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetFriendsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetFriendsResponseMultiError) AllErrors() []error { return m }

// GetFriendsResponseValidationError is the validation error returned by
// GetFriendsResponse.Validate if the designated constraints aren't met.
type GetFriendsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetFriendsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetFriendsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetFriendsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetFriendsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetFriendsResponseValidationError) ErrorName() string {
	return "GetFriendsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetFriendsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetFriendsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetFriendsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetFriendsResponseValidationError{}

// Validate checks the field values on DeleteFriendRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteFriendRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteFriendRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteFriendRequestMultiError, or nil if none found.
func (m *DeleteFriendRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteFriendRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserId()) < 1 {
		err := DeleteFriendRequestValidationError{
			field:  "UserId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_DeleteFriendRequest_UserId_Pattern.MatchString(m.GetUserId()) {
		err := DeleteFriendRequestValidationError{
			field:  "UserId",
			reason: "value does not match regex pattern \"^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetFriendId()) < 1 {
		err := DeleteFriendRequestValidationError{
			field:  "FriendId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_DeleteFriendRequest_FriendId_Pattern.MatchString(m.GetFriendId()) {
		err := DeleteFriendRequestValidationError{
			field:  "FriendId",
			reason: "value does not match regex pattern \"^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteFriendRequestMultiError(errors)
	}

	return nil
}

// DeleteFriendRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteFriendRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteFriendRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteFriendRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteFriendRequestMultiError) AllErrors() []error { return m }

// DeleteFriendRequestValidationError is the validation error returned by
// DeleteFriendRequest.Validate if the designated constraints aren't met.
type DeleteFriendRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteFriendRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteFriendRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteFriendRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteFriendRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteFriendRequestValidationError) ErrorName() string {
	return "DeleteFriendRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteFriendRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteFriendRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteFriendRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteFriendRequestValidationError{}

var _DeleteFriendRequest_UserId_Pattern = regexp.MustCompile("^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$")

var _DeleteFriendRequest_FriendId_Pattern = regexp.MustCompile("^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$")

// Validate checks the field values on DeleteFriendResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteFriendResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteFriendResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteFriendResponseMultiError, or nil if none found.
func (m *DeleteFriendResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteFriendResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if len(errors) > 0 {
		return DeleteFriendResponseMultiError(errors)
	}

	return nil
}

// DeleteFriendResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteFriendResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteFriendResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteFriendResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteFriendResponseMultiError) AllErrors() []error { return m }

// DeleteFriendResponseValidationError is the validation error returned by
// DeleteFriendResponse.Validate if the designated constraints aren't met.
type DeleteFriendResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteFriendResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteFriendResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteFriendResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteFriendResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteFriendResponseValidationError) ErrorName() string {
	return "DeleteFriendResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteFriendResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteFriendResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteFriendResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteFriendResponseValidationError{}
