// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: api/subscriber/v1/subscriber_service.proto

package subscriber

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SubscriberService_SendFriendInvite_FullMethodName    = "/api.subscriber.v1.SubscriberService/SendFriendInvite"
	SubscriberService_AcceptFriendInvite_FullMethodName  = "/api.subscriber.v1.SubscriberService/AcceptFriendInvite"
	SubscriberService_DeclineFriendInvite_FullMethodName = "/api.subscriber.v1.SubscriberService/DeclineFriendInvite"
	SubscriberService_GetFriendInvite_FullMethodName     = "/api.subscriber.v1.SubscriberService/GetFriendInvite"
	SubscriberService_GetAllFriendInvites_FullMethodName = "/api.subscriber.v1.SubscriberService/GetAllFriendInvites"
	SubscriberService_GetFriendProfile_FullMethodName    = "/api.subscriber.v1.SubscriberService/GetFriendProfile"
	SubscriberService_GetFriends_FullMethodName          = "/api.subscriber.v1.SubscriberService/GetFriends"
	SubscriberService_DeleteFriend_FullMethodName        = "/api.subscriber.v1.SubscriberService/DeleteFriend"
)

// SubscriberServiceClient is the client API for SubscriberService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// SubscriberService manages friend relationships between users
type SubscriberServiceClient interface {
	// Public method for API gateway to send a friend invite
	SendFriendInvite(ctx context.Context, in *SendFriendInviteRequest, opts ...grpc.CallOption) (*SendFriendInviteResponse, error)
	// Public method for API gateway to accept a friend invite
	AcceptFriendInvite(ctx context.Context, in *AcceptFriendInviteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Public method for API gateway to decline a friend invite
	DeclineFriendInvite(ctx context.Context, in *DeclineFriendInviteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Public method for API gateway to retrieve details of a specific friend request
	GetFriendInvite(ctx context.Context, in *GetFriendInviteRequest, opts ...grpc.CallOption) (*GetFriendInviteResponse, error)
	// Public method for API gateway to list all friend requests for a user (sent or received)
	GetAllFriendInvites(ctx context.Context, in *GetAllFriendInvitesRequest, opts ...grpc.CallOption) (*GetAllFriendInvitesResponse, error)
	// Public method for API gateway to get a friend's profile
	GetFriendProfile(ctx context.Context, in *GetFriendProfileRequest, opts ...grpc.CallOption) (*GetFriendProfileResponse, error)
	// Public method for API gateway to list all friends for a user
	GetFriends(ctx context.Context, in *GetFriendsRequest, opts ...grpc.CallOption) (*GetFriendsResponse, error)
	// Public method for API gateway to delete a friendship connection between two users
	DeleteFriend(ctx context.Context, in *DeleteFriendRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type subscriberServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSubscriberServiceClient(cc grpc.ClientConnInterface) SubscriberServiceClient {
	return &subscriberServiceClient{cc}
}

func (c *subscriberServiceClient) SendFriendInvite(ctx context.Context, in *SendFriendInviteRequest, opts ...grpc.CallOption) (*SendFriendInviteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendFriendInviteResponse)
	err := c.cc.Invoke(ctx, SubscriberService_SendFriendInvite_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subscriberServiceClient) AcceptFriendInvite(ctx context.Context, in *AcceptFriendInviteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, SubscriberService_AcceptFriendInvite_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subscriberServiceClient) DeclineFriendInvite(ctx context.Context, in *DeclineFriendInviteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, SubscriberService_DeclineFriendInvite_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subscriberServiceClient) GetFriendInvite(ctx context.Context, in *GetFriendInviteRequest, opts ...grpc.CallOption) (*GetFriendInviteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetFriendInviteResponse)
	err := c.cc.Invoke(ctx, SubscriberService_GetFriendInvite_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subscriberServiceClient) GetAllFriendInvites(ctx context.Context, in *GetAllFriendInvitesRequest, opts ...grpc.CallOption) (*GetAllFriendInvitesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllFriendInvitesResponse)
	err := c.cc.Invoke(ctx, SubscriberService_GetAllFriendInvites_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subscriberServiceClient) GetFriendProfile(ctx context.Context, in *GetFriendProfileRequest, opts ...grpc.CallOption) (*GetFriendProfileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetFriendProfileResponse)
	err := c.cc.Invoke(ctx, SubscriberService_GetFriendProfile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subscriberServiceClient) GetFriends(ctx context.Context, in *GetFriendsRequest, opts ...grpc.CallOption) (*GetFriendsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetFriendsResponse)
	err := c.cc.Invoke(ctx, SubscriberService_GetFriends_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subscriberServiceClient) DeleteFriend(ctx context.Context, in *DeleteFriendRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, SubscriberService_DeleteFriend_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SubscriberServiceServer is the server API for SubscriberService service.
// All implementations must embed UnimplementedSubscriberServiceServer
// for forward compatibility.
//
// SubscriberService manages friend relationships between users
type SubscriberServiceServer interface {
	// Public method for API gateway to send a friend invite
	SendFriendInvite(context.Context, *SendFriendInviteRequest) (*SendFriendInviteResponse, error)
	// Public method for API gateway to accept a friend invite
	AcceptFriendInvite(context.Context, *AcceptFriendInviteRequest) (*emptypb.Empty, error)
	// Public method for API gateway to decline a friend invite
	DeclineFriendInvite(context.Context, *DeclineFriendInviteRequest) (*emptypb.Empty, error)
	// Public method for API gateway to retrieve details of a specific friend request
	GetFriendInvite(context.Context, *GetFriendInviteRequest) (*GetFriendInviteResponse, error)
	// Public method for API gateway to list all friend requests for a user (sent or received)
	GetAllFriendInvites(context.Context, *GetAllFriendInvitesRequest) (*GetAllFriendInvitesResponse, error)
	// Public method for API gateway to get a friend's profile
	GetFriendProfile(context.Context, *GetFriendProfileRequest) (*GetFriendProfileResponse, error)
	// Public method for API gateway to list all friends for a user
	GetFriends(context.Context, *GetFriendsRequest) (*GetFriendsResponse, error)
	// Public method for API gateway to delete a friendship connection between two users
	DeleteFriend(context.Context, *DeleteFriendRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedSubscriberServiceServer()
}

// UnimplementedSubscriberServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSubscriberServiceServer struct{}

func (UnimplementedSubscriberServiceServer) SendFriendInvite(context.Context, *SendFriendInviteRequest) (*SendFriendInviteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendFriendInvite not implemented")
}
func (UnimplementedSubscriberServiceServer) AcceptFriendInvite(context.Context, *AcceptFriendInviteRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcceptFriendInvite not implemented")
}
func (UnimplementedSubscriberServiceServer) DeclineFriendInvite(context.Context, *DeclineFriendInviteRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeclineFriendInvite not implemented")
}
func (UnimplementedSubscriberServiceServer) GetFriendInvite(context.Context, *GetFriendInviteRequest) (*GetFriendInviteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFriendInvite not implemented")
}
func (UnimplementedSubscriberServiceServer) GetAllFriendInvites(context.Context, *GetAllFriendInvitesRequest) (*GetAllFriendInvitesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllFriendInvites not implemented")
}
func (UnimplementedSubscriberServiceServer) GetFriendProfile(context.Context, *GetFriendProfileRequest) (*GetFriendProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFriendProfile not implemented")
}
func (UnimplementedSubscriberServiceServer) GetFriends(context.Context, *GetFriendsRequest) (*GetFriendsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFriends not implemented")
}
func (UnimplementedSubscriberServiceServer) DeleteFriend(context.Context, *DeleteFriendRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFriend not implemented")
}
func (UnimplementedSubscriberServiceServer) mustEmbedUnimplementedSubscriberServiceServer() {}
func (UnimplementedSubscriberServiceServer) testEmbeddedByValue()                           {}

// UnsafeSubscriberServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SubscriberServiceServer will
// result in compilation errors.
type UnsafeSubscriberServiceServer interface {
	mustEmbedUnimplementedSubscriberServiceServer()
}

func RegisterSubscriberServiceServer(s grpc.ServiceRegistrar, srv SubscriberServiceServer) {
	// If the following call pancis, it indicates UnimplementedSubscriberServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SubscriberService_ServiceDesc, srv)
}

func _SubscriberService_SendFriendInvite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendFriendInviteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriberServiceServer).SendFriendInvite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SubscriberService_SendFriendInvite_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriberServiceServer).SendFriendInvite(ctx, req.(*SendFriendInviteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubscriberService_AcceptFriendInvite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AcceptFriendInviteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriberServiceServer).AcceptFriendInvite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SubscriberService_AcceptFriendInvite_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriberServiceServer).AcceptFriendInvite(ctx, req.(*AcceptFriendInviteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubscriberService_DeclineFriendInvite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeclineFriendInviteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriberServiceServer).DeclineFriendInvite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SubscriberService_DeclineFriendInvite_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriberServiceServer).DeclineFriendInvite(ctx, req.(*DeclineFriendInviteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubscriberService_GetFriendInvite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFriendInviteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriberServiceServer).GetFriendInvite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SubscriberService_GetFriendInvite_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriberServiceServer).GetFriendInvite(ctx, req.(*GetFriendInviteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubscriberService_GetAllFriendInvites_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllFriendInvitesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriberServiceServer).GetAllFriendInvites(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SubscriberService_GetAllFriendInvites_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriberServiceServer).GetAllFriendInvites(ctx, req.(*GetAllFriendInvitesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubscriberService_GetFriendProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFriendProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriberServiceServer).GetFriendProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SubscriberService_GetFriendProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriberServiceServer).GetFriendProfile(ctx, req.(*GetFriendProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubscriberService_GetFriends_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFriendsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriberServiceServer).GetFriends(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SubscriberService_GetFriends_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriberServiceServer).GetFriends(ctx, req.(*GetFriendsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubscriberService_DeleteFriend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFriendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriberServiceServer).DeleteFriend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SubscriberService_DeleteFriend_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriberServiceServer).DeleteFriend(ctx, req.(*DeleteFriendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SubscriberService_ServiceDesc is the grpc.ServiceDesc for SubscriberService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SubscriberService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.subscriber.v1.SubscriberService",
	HandlerType: (*SubscriberServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendFriendInvite",
			Handler:    _SubscriberService_SendFriendInvite_Handler,
		},
		{
			MethodName: "AcceptFriendInvite",
			Handler:    _SubscriberService_AcceptFriendInvite_Handler,
		},
		{
			MethodName: "DeclineFriendInvite",
			Handler:    _SubscriberService_DeclineFriendInvite_Handler,
		},
		{
			MethodName: "GetFriendInvite",
			Handler:    _SubscriberService_GetFriendInvite_Handler,
		},
		{
			MethodName: "GetAllFriendInvites",
			Handler:    _SubscriberService_GetAllFriendInvites_Handler,
		},
		{
			MethodName: "GetFriendProfile",
			Handler:    _SubscriberService_GetFriendProfile_Handler,
		},
		{
			MethodName: "GetFriends",
			Handler:    _SubscriberService_GetFriends_Handler,
		},
		{
			MethodName: "DeleteFriend",
			Handler:    _SubscriberService_DeleteFriend_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/subscriber/v1/subscriber_service.proto",
}
